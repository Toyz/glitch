name: Rust

on:
  push:
    branches: ["main"]
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache cargo registry and build outputs
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Run tests
        run: cargo test --verbose
      - name: Run clippy
        run: cargo clippy --verbose -- -D warnings

  build:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Cache cargo registry and build outputs
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Build for release
        run: cargo build --verbose --release --target-dir target
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: glitch-artifacts-${{ matrix.os }}
          path: |
            target/release/glitch${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download build artifacts (macOS)
        uses: actions/download-artifact@v3
        with:
          name: glitch-artifacts-macos-latest
          path: target/macos
      - name: Download build artifacts (Windows)
        uses: actions/download-artifact@v3
        with:
          name: glitch-artifacts-windows-latest
          path: target/windows
      - name: Download build artifacts (ubuntu)
        uses: actions/download-artifact@v3
        with:
          name: glitch-artifacts-ubuntu-latest
          path: target/ubuntu
      - name: Create ZIP archive (Ubuntu)
        run: zip -jr target/ubuntu.zip target/ubuntu/
      - name: Create ZIP archive (macOS)
        run: zip -jr target/macos.zip target/macos/
      - name: Create ZIP archive (Windows)
        run: zip -jr target/windows.zip target/windows/
      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            target/ubuntu.zip 
            target/macos.zip 
            target/windows.zip

  prerelease:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download build artifacts (macOS)
        uses: actions/download-artifact@v3
        with:
          name: glitch-artifacts-macos-latest
          path: target/macos
      - name: Download build artifacts (Windows)
        uses: actions/download-artifact@v3
        with:
          name: glitch-artifacts-windows-latest
          path: target/windows
      - name: Download build artifacts (ubuntu)
        uses: actions/download-artifact@v3
        with:
          name: glitch-artifacts-ubuntu-latest
          path: target/ubuntu
      - name: Create ZIP archive (Ubuntu)
        run: zip -jr target/ubuntu.zip target/ubuntu/
      - name: Create ZIP archive (macOS)
        run: zip -jr target/macos.zip target/macos/
      - name: Create ZIP archive (Windows)
        run: zip -jr target/windows.zip target/windows/
      - name: Create Pre-Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: prerelease
          name: Pre-Release
          draft: true
          prerelease: true
          files: |
            target/ubuntu.zip 
            target/macos.zip 
            target/windows.zip
